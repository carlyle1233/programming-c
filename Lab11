# using string pointer to read file and print file 

#include <stdio.h>
#include <stdlib.h>             
#include <string.h>

//함수에 전달해야 할 매개변수가 이름, 생일(월,일, 년도)처럼 많을 때 구조체로 묶어서 매개변수로 전달함 
//함수에 구조체를 넘겨줄 때 복잡 literal 사용하면 구조체 변수를 따로 선언하지 않아도 됨 


struct names {

	char first[20];
	char last[20];
};

struct date {

	char month[12];
	int day, year;
};

struct person {

	struct names name;
	struct date birthday;
};

int convert(const char *mon) {

	static const char *month[] = { "January", "February","March","April","May","June","July","August",
		"September","October", "November","December" };

	for (int i = 0; i < 12; i++) {
		if (strcmp(month[i], mon) == 0) {
			return i + 1;
		}
	}
}

//strcmp: 두개의 문자열을 비교해 문자열이 같으면 0 반환, 다르면 음수혹은 양수 반환 
// 정의: int strcmp ( const char* str1, const char* str2) 
// str1: 비교할 문자열1 . str2: 비교할 문자열2 

//int argc: 메인함수에 전달되는 정보의 갯수. argument 의 수 
//char *argv[]: 메인함수에 전달되는 실질적인 정보. 문자열의 배열을 의미. argument가 char 형으로 저장되는 변수 
//	첫번째 문자열은 프로그램의 실행경로로 항상 고정 
//	argv[0] : 항상 실행파일명 저장  
//	argv[1], argv[2] >> 순서대로 사용자가 입력한 argument가 저장됨. 


main(int argc, char *argv[]) {

	struct person cast[20]; // 구조체 배열 선언 
	int ncast = 0;
	FILE *f;
	int i;


	//argc를 잘 받아들였는지 확인 
	if (argc < 2) {

		fprintf(stderr, "usage: %s filename\n", argv[0]);
		//stderr: 에러 메시지를 출력할 장치 
		exit(1);
	}

	//파일을 잘 읽어들였는지 확인 
	//f=fopen("", "r") 형태 
	if ((f = fopen(argv[1], "r")) == NULL) {

		fprintf(stderr, "%s: can't open %s\n", argv[0], argv[1]);
		exit(1);
	}

	/* Reads the file contents into cast[] */
/*
	while ((fscanf(f, "%s %s %s %d, %d",
		&cast[ncast].name.last,
		&cast[ncast].name.first,
		&cast[ncast].birthday.month,
		&cast[ncast].birthday.day,
		&cast[ncast].birthday.year)) != EOF) {

		ncast++;
	}*/


	for (ncast = 0; ncast < 20 && !feof(f); ncast++)

		if (fscanf(f, "%s %s %s %d, %d",
			&cast[ncast].name.last,
			&cast[ncast].name.first,
			&cast[ncast].birthday.month,
			&cast[ncast].birthday.day,
			&cast[ncast].birthday.year) != 5 ){

			break;
}


	fclose(f);

	printf("Cast of Captain America: Civil War\n");
	printf("==================================\n\n");
	printf("Name   (Birthday)\n\n");
	for (i = 0; i < ncast; i++)
		printf("%s, %s  (%02d/%02d/%02d)\n",
			cast[i].name.last,
			cast[i].name.first,
			convert(cast[i].birthday.month),
			cast[i].birthday.day,
			cast[i].birthday.year % 100);

}



//1. printf와 fprintf
//printf(): 표준 출력 장치. 모니터로만 데이터 출력할 수 있는 함수 
//fprintf(): stream을 지정해줄 수 있는함수. stream을 모니터로 지정하면 모니터로 출력 
//특정 파일로 지정하면 그 대상으로 데이터가 전송됨. 
//출력은 하되, 텍스트에 하는 것 

//fscanf: 텍스트 안에 있는 내용을 읽어내는 것. 
//즉, 파일로부터 지정된 데이터를 읽어오는 것 

//2. EOF와 feof()함수 
// EOF: '다음'에 읽어오는 부분이 파일의 끝이라 실패하는 경우 true return 
//feof():'마지막' 함수가 실패하는 경우에 true return. EOF를 넘어서게 될 때 true를 반환
// 파일 포인터가 끝을 가리켜도 함수는 한 번 더 실행이 되고, 거기서 error 가 나와야 true가 됨  

//!feof(f) : 파일이 끝날때까지 

//2차원 배열: 배열의 요소로 1차원 배열을 가짐. 
//문법: type 배열이름[열 길이][행 길이];


//동적할당(malloc): 실행 시간 동안 사용할 메모리 공간을 할당하는 것 
//사용이 끝나면 운영체제가 쓸 수 있도록 반납하고 다음에 다시 할당 받을 수 있음,
//정적 메모리 할당: 실행하는 순간 프로그램이 사용할 메모리의 크기를 고려해 메모리의 할당이 이루어짐 
//문법: malloc(size_t size)  기능: 메모리를 힙에서 할당해 반환 

//1. 포인터 변수 선언
//2. 임의의 공간을 원하는 만큼 할당 받고 그 주소를 포인터에 저장 
//3. 포인터를 가지고 할당받은 메모리 공간을 사용함
//4. 다 쓰면 할당받은 메모리를 해제해 운영체제에게 돌려줌 
